var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var __extends = this && this.__extends || function __extends(t, e) { 
 function r() { 
 this.constructor = t;
}
for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i]);
r.prototype = e.prototype, t.prototype = new r();
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var qufu;
(function (qufu) {
    var SceneBase = (function () {
        function SceneBase() {
            this._stage = qufu.SceneManager.Instance._stage;
        }
        SceneBase.prototype.onResize = function () {
        };
        SceneBase.prototype.show = function () {
            this._stage.addEventListener(egret.Event.RESIZE, this.onResize, this);
        };
        SceneBase.prototype.dispose = function () {
            this._stage.removeEventListener(egret.Event.RESIZE, this.onResize, this);
            this._stage = null;
        };
        return SceneBase;
    }());
    qufu.SceneBase = SceneBase;
    __reflect(SceneBase.prototype, "qufu.SceneBase");
})(qufu || (qufu = {}));
var qufu;
(function (qufu) {
    var LoadingScene = (function (_super) {
        __extends(LoadingScene, _super);
        function LoadingScene() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.loaded = 0;
            return _this;
        }
        LoadingScene.prototype.show = function () {
            return __awaiter(this, void 0, void 0, function () {
                var self, loadingView, manifestJson;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            self = this;
                            _super.prototype.show.call(this);
                            loadingView = new qufu.LoadingView();
                            if (!window["loadingView"]) {
                                window["loadingView"] = loadingView;
                            }
                            self.view = loadingView;
                            self._stage.addChild(self.view);
                            self.onResize();
                            if (!!my_gameVars.publish) return [3 /*break*/, 2];
                            return [4 /*yield*/, self.getMainManifestJson("manifest.json")];
                        case 1:
                            manifestJson = _a.sent();
                            self.loadArr = manifestJson.game;
                            return [3 /*break*/, 3];
                        case 2:
                            self.loadArr = ["main" + my_gameVars.versionNumber + ".min.js"];
                            _a.label = 3;
                        case 3:
                            self.total = self.loadArr.length;
                            self.loadNext();
                            return [2 /*return*/];
                    }
                });
            });
        };
        LoadingScene.prototype.getMainManifestJson = function (file) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                RES.getResByUrl(file, function (res) {
                    resolve(res);
                }, _this, RES.ResourceItem.TYPE_JSON);
            });
        };
        LoadingScene.prototype.loadNext = function () {
            var self = this;
            if (self.loaded >= this.total) {
                var Main = egret.getDefinitionByName("Main");
                Main && qufu.SceneManager.Instance.rootContainer.addChild(new Main());
                qufu.SceneManager.Instance.changeScene(null);
            }
            else {
                self.view.showPregress(self.loaded, self.total);
                var script_1 = document.createElement("script");
                script_1.async = false;
                var loadingItem = self.loadArr[self.loaded];
                if (loadingItem == "main" + my_gameVars.versionNumber + ".min.js") {
                    script_1.src = loadingItem;
                }
                else {
                    script_1.src = loadingItem + "?v=" + Math.random();
                }
                script_1.addEventListener("load", function () {
                    script_1.parentNode.removeChild(script_1);
                    script_1.removeEventListener('load', arguments.callee, false);
                    self.loaded++;
                    self.loadNext();
                });
                document.body.appendChild(script_1);
            }
        };
        LoadingScene.prototype.onResize = function () {
            var self = this;
            if (self.view) {
                var nW = self._stage.stageWidth;
                var nH = self._stage.stageHeight;
                self.view.onResize(nW, nH);
            }
        };
        LoadingScene.prototype.dispose = function () {
            var self = this;
            self.loadArr = null;
            self.view = null;
        };
        return LoadingScene;
    }(qufu.SceneBase));
    qufu.LoadingScene = LoadingScene;
    __reflect(LoadingScene.prototype, "qufu.LoadingScene");
})(qufu || (qufu = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-present, Egret Technology.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var LoadingUI = (function (_super) {
    __extends(LoadingUI, _super);
    function LoadingUI() {
        var _this = _super.call(this) || this;
        _this.createView();
        return _this;
    }
    LoadingUI.prototype.createView = function () {
        this.textField = new egret.TextField();
        this.addChild(this.textField);
        this.textField.y = 300;
        this.textField.width = 480;
        this.textField.height = 100;
        this.textField.textAlign = "center";
    };
    LoadingUI.prototype.onProgress = function (current, total) {
        this.textField.text = "Loading..." + current + "/" + total;
    };
    return LoadingUI;
}(egret.Sprite));
__reflect(LoadingUI.prototype, "LoadingUI", ["RES.PromiseTaskReporter"]);
var DebugPlatform = (function () {
    function DebugPlatform() {
    }
    DebugPlatform.prototype.getUserInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, { nickName: "username" }];
            });
        });
    };
    DebugPlatform.prototype.login = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    return DebugPlatform;
}());
__reflect(DebugPlatform.prototype, "DebugPlatform", ["Platform"]);
if (!window.platform) {
    window.platform = new DebugPlatform();
}
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-present, Egret Technology.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var qufu;
(function (qufu) {
    var QFMain = (function (_super) {
        __extends(QFMain, _super);
        function QFMain() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        QFMain.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            RES.setMaxLoadingThread(8);
            //1 表明指定的地址是支持跨域的 h5的新规定
            /**
             * anonymous ：如果使用这个值的话就会在请求中的 header 中的带上 Origin 属性，但请求不会带上 cookie 和其他的一些认证信息。
               use-credentials ：这个就同时会在跨域请求中带上 cookie 和其他的一些认证信息。
             */
            egret.ImageLoader.crossOrigin = "anonymous";
            egret.TextField.default_fontFamily = "SimHei";
            qufu.SceneManager.Instance._stage = this.stage;
            qufu.SceneManager.Instance.rootContainer = this;
            RES.registerVersionController(new QufuVersionController());
            // egret.lifecycle.addLifecycleListener((context) => {
            //     // custom lifecycle plugin
            // })
            // egret.lifecycle.onPause = () => {
            //     egret.ticker.pause();
            //     console.log('进入后台');
            // }
            // egret.lifecycle.onResume = () => {
            //     egret.ticker.resume();
            //     console.log('进入前台');
            // }
            //inject the custom material parser
            //注入自定义的素材解析器
            var assetAdapter = new AssetAdapter();
            egret.registerImplementation("eui.IAssetAdapter", assetAdapter);
            egret.registerImplementation("eui.IThemeAdapter", new qufu.QFThemeAdapter());
            this.runGame().catch(function (e) {
                console.log(e);
            });
        };
        QFMain.prototype.runGame = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            qufu.requestInfo();
                            return [4 /*yield*/, this.loadResource()];
                        case 1:
                            _a.sent();
                            qufu.SceneManager.Instance.changeScene(qufu.SelectServerScene);
                            return [2 /*return*/];
                    }
                });
            });
        };
        QFMain.prototype.loadResource = function () {
            return __awaiter(this, void 0, void 0, function () {
                var e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 4, , 5]);
                            // const loadingView = new LoadingUI();
                            // this.stage.addChild(loadingView); 
                            return [4 /*yield*/, RES.loadConfig(qufu.resourceDir + "/default.res.json", qufu.resourceDir + "/")];
                        case 1:
                            // const loadingView = new LoadingUI();
                            // this.stage.addChild(loadingView); 
                            _a.sent();
                            return [4 /*yield*/, this.loadTheme()];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, RES.loadGroup("preload", 0)];
                        case 3:
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 4:
                            e_1 = _a.sent();
                            console.error(e_1);
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        QFMain.prototype.loadTheme = function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                // load skin theme configuration file, you can manually modify the file. And replace the default skin.
                //加载皮肤主题配置文件,可以手动修改这个文件。替换默认皮肤。
                var theme;
                if (false) {
                    theme = new eui.Theme(qufu.resourceDir + "/default.thm.json", _this.stage);
                }
                else {
                    theme = new eui.Theme(qufu.resourceDir + "/qufu.json", _this.stage);
                }
                theme.addEventListener(eui.UIEvent.COMPLETE, function () {
                    resolve();
                }, _this);
            });
        };
        return QFMain;
    }(eui.UILayer));
    qufu.QFMain = QFMain;
    __reflect(QFMain.prototype, "qufu.QFMain");
})(qufu || (qufu = {}));
var QufuVersionController = (function () {
    function QufuVersionController() {
    }
    QufuVersionController.prototype.init = function () {
        var promise = new Promise(function (resolve) {
            resolve();
        });
        return promise;
    };
    QufuVersionController.prototype.getVirtualUrl = function (url) {
        return url;
    };
    return QufuVersionController;
}());
__reflect(QufuVersionController.prototype, "QufuVersionController", ["RES.VersionController", "RES.IVersionController"]);
var qufu;
(function (qufu) {
    var TalkToPHP = (function () {
        function TalkToPHP() {
        }
        TalkToPHP.onGetData = function (data) {
            if (data) {
                data = JSON.parse(data);
                qufu.noticeTxt = data.notice;
                my_gameVars.versionNumber = data.versionNumber;
            }
        };
        return TalkToPHP;
    }());
    qufu.TalkToPHP = TalkToPHP;
    __reflect(TalkToPHP.prototype, "qufu.TalkToPHP");
})(qufu || (qufu = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-present, Egret Technology.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var qufu;
(function (qufu) {
    var QFThemeAdapter = (function () {
        function QFThemeAdapter() {
        }
        /**
         * 解析主题
         * @param url 待解析的主题url
         * @param onSuccess 解析完成回调函数，示例：compFunc(e:egret.Event):void;
         * @param onError 解析失败回调函数，示例：errorFunc():void;
         * @param thisObject 回调的this引用
         */
        QFThemeAdapter.prototype.getTheme = function (url, onSuccess, onError, thisObject) {
            var _this = this;
            function onResGet(e) {
                onSuccess.call(thisObject, e);
            }
            function onResError(e) {
                if (e.resItem.url == url) {
                    RES.removeEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, onResError, null);
                    onError.call(thisObject);
                }
            }
            if (typeof generateEUI !== 'undefined') {
                egret.callLater(function () {
                    onSuccess.call(thisObject, generateEUI);
                }, this);
            }
            else if (typeof generateEUI2 !== 'undefined') {
                RES.getResByUrl(qufu.resourceDir + "/gameEui.json", function (data, url) {
                    window["JSONParseClass"]["setData"](data);
                    egret.callLater(function () {
                        onSuccess.call(thisObject, generateEUI2);
                    }, _this);
                }, this, RES.ResourceItem.TYPE_JSON);
            }
            else if (typeof generateJSON !== 'undefined') {
                if (url.indexOf(".exml") > -1) {
                    var dataPath = url.split("/");
                    dataPath.pop();
                    var dirPath = dataPath.join("/") + "_EUI.json";
                    if (!generateJSON.paths[url]) {
                        RES.getResByUrl(dirPath, function (data) {
                            window["JSONParseClass"]["setData"](data);
                            egret.callLater(function () {
                                onSuccess.call(thisObject, generateJSON.paths[url]);
                            }, _this);
                        }, this, RES.ResourceItem.TYPE_JSON);
                    }
                    else {
                        egret.callLater(function () {
                            onSuccess.call(thisObject, generateJSON.paths[url]);
                        }, this);
                    }
                }
                else {
                    egret.callLater(function () {
                        onSuccess.call(thisObject, generateJSON);
                    }, this);
                }
            }
            else {
                RES.addEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, onResError, null);
                RES.getResByUrl(url, onResGet, this, RES.ResourceItem.TYPE_TEXT);
            }
        };
        return QFThemeAdapter;
    }());
    qufu.QFThemeAdapter = QFThemeAdapter;
    __reflect(QFThemeAdapter.prototype, "qufu.QFThemeAdapter", ["eui.IThemeAdapter"]);
})(qufu || (qufu = {}));
var qufu;
(function (qufu) {
    var CreateRoleScence = (function (_super) {
        __extends(CreateRoleScence, _super);
        function CreateRoleScence() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CreateRoleScence.prototype.onResize = function () {
            var self = this;
            var nW = self._stage.stageWidth;
            var nH = self._stage.stageHeight;
            if (self.view) {
                self.view.onResize(nW, nH);
            }
        };
        CreateRoleScence.prototype.show = function () {
            _super.prototype.show.call(this);
            var self = this;
            self.view = new qufu.CreateRoleView();
            self._stage.addChild(self.view);
            self.onResize();
        };
        CreateRoleScence.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            var self = this;
            if (self.view) {
                if (self.view.parent) {
                    self.view.parent.removeChild(self.view);
                }
                self.view.dispose();
                self.view = null;
            }
        };
        return CreateRoleScence;
    }(qufu.SceneBase));
    qufu.CreateRoleScence = CreateRoleScence;
    __reflect(CreateRoleScence.prototype, "qufu.CreateRoleScence");
})(qufu || (qufu = {}));
var qufu;
(function (qufu) {
    qufu.resourceDir = false ? "resource" : "qufu_resource";
    qufu.requestInfo = function () {
        HttpRequest.request(my_gameVars.APILocaiton + "txt/list.txt?v=" + new Date().getTime(), qufu.TalkToPHP.onGetData, qufu.TalkToPHP);
    };
})(qufu || (qufu = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-present, Egret Technology.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var AssetAdapter = (function () {
    function AssetAdapter() {
    }
    /**
     * @language zh_CN
     * 解析素材
     * @param source 待解析的新素材标识符
     * @param compFunc 解析完成回调函数，示例：callBack(content:any,source:string):void;
     * @param thisObject callBack的 this 引用
     */
    AssetAdapter.prototype.getAsset = function (source, compFunc, thisObject) {
        function onGetRes(data) {
            compFunc.call(thisObject, data, source);
        }
        if (RES.hasRes(source)) {
            var data = RES.getRes(source);
            if (data) {
                onGetRes(data);
            }
            else {
                RES.getResAsync(source, onGetRes, this);
            }
        }
        else {
            RES.getResByUrl(source, onGetRes, this, RES.ResourceItem.TYPE_IMAGE);
        }
    };
    return AssetAdapter;
}());
__reflect(AssetAdapter.prototype, "AssetAdapter", ["eui.IAssetAdapter"]);
var qufu;
(function (qufu) {
    var SceneManager = (function () {
        function SceneManager() {
        }
        Object.defineProperty(SceneManager, "Instance", {
            get: function () {
                if (!this._instance) {
                    this._instance = new SceneManager();
                }
                return this._instance;
            },
            enumerable: true,
            configurable: true
        });
        SceneManager.prototype.changeScene = function (Scene) {
            var self = this;
            if (self.curScene) {
                self.curScene.dispose();
            }
            if (Scene) {
                self.curScene = new Scene();
                self.curScene.show();
            }
        };
        return SceneManager;
    }());
    qufu.SceneManager = SceneManager;
    __reflect(SceneManager.prototype, "qufu.SceneManager");
})(qufu || (qufu = {}));
var qufu;
(function (qufu) {
    var SelectServerScene = (function (_super) {
        __extends(SelectServerScene, _super);
        function SelectServerScene() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.bgView = new qufu.BgView();
            self.noticeView = new qufu.NoticeView();
            self.bgView.addEventListener("open noticeview", self.openNoticeView, self);
            self.noticeView.addEventListener("close noticeview", self.closeNoticeView, self);
            return _this;
        }
        SelectServerScene.prototype.show = function () {
            _super.prototype.show.call(this);
            var self = this;
            self._stage.addChild(self.bgView);
            self.onResize();
        };
        SelectServerScene.prototype.openNoticeView = function (event) {
            var self = this;
            self._stage.addChild(self.noticeView);
        };
        SelectServerScene.prototype.closeNoticeView = function (event) {
            var self = this;
            self._stage.removeChild(self.noticeView);
        };
        SelectServerScene.prototype.onResize = function () {
            var self = this;
            var nW = self._stage.stageWidth;
            var nH = self._stage.stageHeight;
            self.bgView.onResize(nW, nH);
            self.noticeView.onResize(nW, nH);
        };
        SelectServerScene.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            var self = this;
            if (self.bgView) {
                self.bgView.removeEventListener("open noticeview", self.openNoticeView, self);
                if (self.bgView.parent) {
                    self.bgView.parent.removeChild(self.bgView);
                }
                self.bgView.dispose();
                self.bgView = null;
            }
            if (self.noticeView) {
                self.noticeView.removeEventListener("close noticeview", self.closeNoticeView, self);
                if (self.noticeView.parent) {
                    self.noticeView.parent.removeChild(self.noticeView);
                }
                self.noticeView.dispose();
                self.noticeView = null;
            }
        };
        return SelectServerScene;
    }(qufu.SceneBase));
    qufu.SelectServerScene = SelectServerScene;
    __reflect(SelectServerScene.prototype, "qufu.SelectServerScene");
})(qufu || (qufu = {}));
var HttpRequest = (function () {
    function HttpRequest() {
    }
    /**
     * @url 请求地址
     * @params 参数
     * @callBack 回调
     * @method get 或者post
     */
    HttpRequest.request = function (url, callBack, thisObj, params, args, method) {
        if (method === void 0) { method = egret.URLRequestMethod.GET; }
        var urlloader = new egret.URLLoader;
        var r = new egret.URLRequest();
        r.url = url;
        r.method = method;
        if (params) {
            r.data = new egret.URLVariables(params);
        }
        else {
            r.data = null;
        }
        var self = this;
        var onSuccess = function (e) {
            // console.log(e.target.data);
            callBack.call(thisObj, e.target.data, args ? args : null);
            urlloader.removeEventListener(egret.Event.COMPLETE, onSuccess, self);
            urlloader.removeEventListener(egret.IOErrorEvent.IO_ERROR, onFail, self);
        };
        var onFail = function (e) {
            console.log(url + "\u8BF7\u6C42\u9519\u8BEF!");
            callBack.call(thisObj, null, args ? args : null);
            urlloader.removeEventListener(egret.Event.COMPLETE, onSuccess, self);
            urlloader.removeEventListener(egret.IOErrorEvent.IO_ERROR, onFail, self);
        };
        urlloader.addEventListener(egret.Event.COMPLETE, onSuccess, self);
        urlloader.addEventListener(egret.IOErrorEvent.IO_ERROR, onFail, self);
        urlloader.load(r);
    };
    return HttpRequest;
}());
__reflect(HttpRequest.prototype, "HttpRequest");
var qufu;
(function (qufu) {
    var BgView = (function (_super) {
        __extends(BgView, _super);
        function BgView() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BgView.prototype.createChildren = function () {
            var self = this;
            self.skinName = "BgViewSkin";
            self.txt_huanqu.addEventListener(egret.TouchEvent.TOUCH_TAP, self.onHuanQuHandler, self);
            self.btn_notice.addEventListener(egret.TouchEvent.TOUCH_TAP, self.onNoticeHandler, self);
            self.btn_start.addEventListener(egret.TouchEvent.TOUCH_TAP, self.onStartHandler, self);
        };
        BgView.prototype.onHuanQuHandler = function (e) {
            this.dispatchEvent(new egret.Event("open selectview"));
        };
        BgView.prototype.onNoticeHandler = function (e) {
            this.dispatchEvent(new egret.Event("open noticeview"));
        };
        BgView.prototype.onStartHandler = function (e) {
            qufu.SceneManager.Instance.changeScene(qufu.CreateRoleScence);
        };
        BgView.prototype.showInfo = function () {
            var self = this;
        };
        BgView.prototype.onResize = function (nW, nH) {
            var self = this;
            self.width = nW;
            self.height = nH;
        };
        BgView.prototype.dispose = function () {
            var self = this;
            self.txt_huanqu.removeEventListener(egret.TouchEvent.TOUCH_TAP, self.onHuanQuHandler, self);
            self.btn_notice.removeEventListener(egret.TouchEvent.TOUCH_TAP, self.onNoticeHandler, self);
            self.btn_start.removeEventListener(egret.TouchEvent.TOUCH_TAP, self.onStartHandler, self);
        };
        return BgView;
    }(eui.Component));
    qufu.BgView = BgView;
    __reflect(BgView.prototype, "qufu.BgView");
})(qufu || (qufu = {}));
var qufu;
(function (qufu) {
    var CreateRoleView = (function (_super) {
        __extends(CreateRoleView, _super);
        function CreateRoleView() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CreateRoleView.prototype.createChildren = function () {
            var self = this;
            self.skinName = "CreateRoleViewSkin";
            self.radioGrp = new eui.RadioButtonGroup();
            self.radio_0.group = self.radioGrp;
            self.radio_1.group = self.radioGrp;
            self.radio_0.value = 0;
            self.radio_1.value = 1;
            self.radio_0.selected = true;
            self.btn_start.addEventListener(egret.TouchEvent.TOUCH_TAP, self.onClickHandler, self);
            self.txt_sj.addEventListener(egret.TouchEvent.TOUCH_TAP, self.onClickHandler, self);
            self.radioGrp.addEventListener(egret.Event.CHANGE, self.onRadioChange, self);
        };
        CreateRoleView.prototype.onClickHandler = function (e) {
            var self = this;
            var target = e.currentTarget;
            if (self.btn_start === target) {
                qufu.SceneManager.Instance.changeScene(qufu.LoadingScene);
            }
            else if (self.txt_sj === target) {
            }
        };
        CreateRoleView.prototype.onRadioChange = function (e) {
            var self = this;
            self.img_model.source = qufu.resourceDir + "/assets/qufu_img/qf_gender_" + self.radioGrp.selectedValue + ".png";
        };
        CreateRoleView.prototype.onResize = function (nW, nH) {
            var self = this;
            self.width = nW;
            self.height = nH;
        };
        CreateRoleView.prototype.dispose = function () {
            var self = this;
            self.btn_start.removeEventListener(egret.TouchEvent.TOUCH_TAP, self.onClickHandler, self);
            self.txt_sj.removeEventListener(egret.TouchEvent.TOUCH_TAP, self.onClickHandler, self);
            self.radioGrp.removeEventListener(egret.Event.CHANGE, self.onRadioChange, self);
        };
        return CreateRoleView;
    }(eui.Component));
    qufu.CreateRoleView = CreateRoleView;
    __reflect(CreateRoleView.prototype, "qufu.CreateRoleView");
})(qufu || (qufu = {}));
var qufu;
(function (qufu) {
    var LoadingView = (function (_super) {
        __extends(LoadingView, _super);
        function LoadingView() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.PROW = 724;
            _this.createOk = false;
            _this._wordsUpdateTime = 0;
            _this._disposed = false;
            _this.mcJSON = qufu.resourceDir + "/assets/qufu_mc/loadXingMc.json";
            _this.mcPNG = qufu.resourceDir + "/assets/qufu_mc/loadXingMc.png";
            _this._words = [
                "完成每日元宝悬赏可获得海量主角经验，助你快速升级！",
                "战士是三职业中HP最后厚的职业，抗BOSS无压力！",
                "法师是三职业中杀怪效率最快的，群攻魔法刷刷刷！",
                "道士的神兽宠物可打可抗，挑战BOSS，打架骚扰必备！",
                "首领正在复活...请耐心等待！",
                "帮会BOSS开启无敌了，赶紧击杀它小弟消除无敌！",
                "良心游戏，绿色传奇，打BOSS掉落充值道具！",
                "超强力英雄伙伴，冰冻BOSS无伤挂机超给力！",
                "正在打磨武器，练级打怪事半功倍！",
                "正在确认首领存活数量，请耐心等待！",
                "提升转生等级可以解锁更高级的装备哦！",
                "首领复活了，赶紧召集帮会小伙伴前去挑战！",
                "兽王来袭里，赶紧组队前去讨伐兽王残影！",
                "正在开启精彩的旅程...",
                "超强VIP打怪就送，专属会员地图极品爆爆爆！"
            ];
            _this.timer = 0;
            _this.doTimes = 0;
            return _this;
        }
        LoadingView.prototype.createChildren = function () {
            var self = this;
            _super.prototype.createChildren.call(this);
            self.skinName = "LoadingViewSkin";
            self.createOk = true;
            RES.getResByUrl(self.mcJSON, self.loadedJsonHandler, self, RES.ResourceItem.TYPE_JSON);
            RES.getResByUrl(self.mcPNG, self.loadedPngHandler, self, RES.ResourceItem.TYPE_IMAGE);
            self.doFakeProcess();
        };
        LoadingView.prototype.doFakeProcess = function () {
            var self = this;
            self.clearTimer();
            if (!self._disposed) {
                self.doTimes++;
                var num_1 = Math.floor(Math.random() * 10) / 10;
                var time = self.doTimes < 10 ? num_1 * 100 : num_1 * 500;
                self.timer = setTimeout(function () {
                    self.timer = 0;
                    if (self.img_fakePro.width === 0) {
                        self.img_fakePro.width = num_1 * self.PROW;
                    }
                    else if (self.img_fakePro.width < self.PROW) {
                        self.img_fakePro.width = self.PROW;
                    }
                    else if (self.img_fakePro.width === self.PROW) {
                        self.img_fakePro.width = 0;
                    }
                    self.setMC1Pos();
                    self.doFakeProcess();
                }, time);
            }
        };
        LoadingView.prototype.clearTimer = function () {
            var self = this;
            if (self.timer > 0) {
                clearTimeout(self.timer);
                self.timer = 0;
                console.log("fakePro stop timer");
            }
        };
        LoadingView.prototype.loadedJsonHandler = function (data, url) {
            var self = this;
            self._movieData = data;
            self.movieCreate();
        };
        LoadingView.prototype.loadedPngHandler = function (img, url) {
            var self = this;
            self._movieImage = img;
            self.movieCreate();
        };
        LoadingView.prototype.movieCreate = function () {
            var self = this;
            if (self._movieData && self._movieImage) {
                if (self._disposed) {
                    RES.destroyRes(self.mcJSON);
                    RES.destroyRes(self.mcPNG);
                    return;
                }
                var mcFactory = new egret.MovieClipDataFactory(self._movieData, self._movieImage);
                mcFactory.enableCache = false;
                self._mc0 = new egret.MovieClip(mcFactory.generateMovieClipData("loadXingMc"));
                self.grp_0.addChild(self._mc0);
                self._mc0.play(-1);
                self._mc0.blendMode = egret.BlendMode.ADD;
                self.setMC0Pos();
                self._mc1 = new egret.MovieClip(mcFactory.generateMovieClipData("loadXingMc"));
                self.grp_1.addChild(self._mc1);
                self._mc1.play(-1);
                self._mc1.blendMode = egret.BlendMode.ADD;
                self.setMC1Pos();
            }
        };
        LoadingView.prototype.showPregress = function (cur, total) {
            var self = this;
            if (self.createOk) {
                self.img_pro.width = Math.ceil(self.PROW * (cur / total));
                self.setMC0Pos();
                var now = egret.getTimer();
                if (self._wordsUpdateTime < now) {
                    var value = self._words[Math.floor(Math.random() * self._words.length)];
                    self.txt_show.text = value;
                    self._wordsUpdateTime = now + 1000;
                }
            }
        };
        LoadingView.prototype.setMC0Pos = function () {
            var self = this;
            if (self._mc0) {
                self._mc0.x = self.img_pro.x + self.img_pro.width - 118;
                self._mc0.y = self.img_pro.y - 30;
            }
        };
        LoadingView.prototype.setMC1Pos = function () {
            var self = this;
            if (self._mc1) {
                self._mc1.x = self.img_fakePro.x + self.img_fakePro.width - 118;
                self._mc1.y = self.img_fakePro.y - 30;
            }
        };
        LoadingView.prototype.setText = function (value) {
            var self = this;
            if (self.createOk) {
                self.txt_show.text = value;
            }
        };
        LoadingView.prototype.onResize = function (nW, nH) {
            var self = this;
            self.width = nW;
            self.height = nH;
        };
        LoadingView.prototype.dispose = function () {
            var self = this;
            self._disposed = true;
            self._movieData = null;
            self._movieImage = null;
            self.clearTimer();
            if (self._mc0) {
                if (self._mc0.parent) {
                    self._mc0.parent.removeChild(self._mc0);
                }
                self._mc0 = null;
                RES.destroyRes(self.mcJSON);
                RES.destroyRes(self.mcPNG);
            }
            RES.destroyRes(self.img_bg.source);
            if (self.parent) {
                self.parent.removeChild(self);
            }
        };
        return LoadingView;
    }(eui.Component));
    qufu.LoadingView = LoadingView;
    __reflect(LoadingView.prototype, "qufu.LoadingView");
})(qufu || (qufu = {}));
var qufu;
(function (qufu) {
    var NoticeView = (function (_super) {
        __extends(NoticeView, _super);
        function NoticeView() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NoticeView.prototype.createChildren = function () {
            var self = this;
            _super.prototype.createChildren.call(this);
            self.skinName = "NoticeViewSkin";
            if (qufu.noticeTxt) {
                var htmlText = new egret.HtmlTextParser();
                self.txt_content.textFlow = htmlText.parse(qufu.noticeTxt);
            }
            else {
                self.txt_content.text = "";
            }
            self.btn_close.addEventListener(egret.TouchEvent.TOUCH_TAP, self.onClose, self);
        };
        NoticeView.prototype.onClose = function (event) {
            this.parent.removeChild(this);
        };
        NoticeView.prototype.onResize = function (nW, nH) {
            var self = this;
            self.x = (nW - 700) >> 1;
            self.y = (nH - 501) >> 1;
        };
        NoticeView.prototype.dispose = function () {
            var self = this;
            if (self.btn_close) {
                self.btn_close.removeEventListener(egret.TouchEvent.TOUCH_TAP, self.onClose, self);
            }
        };
        return NoticeView;
    }(eui.Component));
    qufu.NoticeView = NoticeView;
    __reflect(NoticeView.prototype, "qufu.NoticeView");
})(qufu || (qufu = {}));
